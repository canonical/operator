# Copyright 2021 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static, unit

[vars]
# These need to be relative paths because autopep8 doesn't handle absolute
# paths with relative paths in "exclude" correctly.
src_path = ops/
tst_path = test/
all_path = {[vars]src_path} {[vars]tst_path}
testing_src_path = testing/src/scenario/
testing_tst_path = testing/tests/
tracing_tst_path = tracing/test/
examples_path = examples/

[testenv]
runner = uv-venv-lock-runner
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  MODEL_SETTINGS

[testenv:docs]
description = Build the Sphinx docs
basepython = python3.11
dependency_groups = docs
passenv =
    # ReadTheDocs builder wants the output in a place of its choosing.
    # https://docs.readthedocs.com/platform/stable/build-customization.html#where-to-put-files
    READTHEDOCS_OUTPUT
    # The starter pack config uses READTHEDOCS_VERSION to build URLs for sitemap.xml.
    READTHEDOCS_VERSION
commands =
    sphinx-build -W --keep-going -b dirhtml docs/ {env:READTHEDOCS_OUTPUT:docs/_build}/html -d docs/.sphinx/.doctrees

[testenv:docs-live]
description = Live development: build the Sphinx docs with autoreloading enabled
basepython = python3.11
dependency_groups = docs
commands =
    sphinx-autobuild -b dirhtml docs/ docs/_build/html -d docs/.sphinx/.doctrees --watch ops/ --port 8000 {posargs}

[testenv:format]
description = Apply coding style standards to code
dependency_groups = lint
commands = ruff format --preview

[testenv:lint]
description = Check code against coding style standards
dependency_groups = lint
commands =
    ruff check --preview
    ruff format --preview --check
    codespell --skip ./docs/_build {posargs}

[testenv:static]
description = Run static type checker
allowlist_externals = cp
dependency_groups = unit, static
commands = pyright {posargs}

[testenv:py{3.10,3.12}-unit]
runner = uv-venv-lock-runner
base=unit

[testenv:unit]
description = Run unit tests in parallel without coverage
passenv =
    RUN_REAL_PEBBLE_TESTS
    PEBBLE
dependency_groups = unit, xdist
commands =
    pytest -n auto \
        --ignore={[vars]tst_path}smoke \
        --ignore={[vars]tst_path}integration \
        --ignore={[vars]tst_path}benchmark \
        --ignore={[vars]testing_tst_path}benchmark \
        --ignore={[vars]tracing_tst_path} \
        --ignore={[vars]examples_path} \
        -v --tb native \
        -W 'ignore:Harness is deprecated:PendingDeprecationWarning' {posargs}

[testenv:coverage]
description = Run unit tests with coverage
allowlist_externals = mv
passenv =
    RUN_REAL_PEBBLE_TESTS
    PEBBLE
dependency_groups = unit, coverage
commands =
    coverage run --source={[vars]src_path},{[vars]testing_src_path} \
             --branch -m pytest --ignore={[vars]tst_path}smoke \
             --ignore={[vars]tst_path}integration \
             --ignore={[vars]tst_path}benchmark \
             --ignore={[vars]testing_tst_path}benchmark \
             --ignore={[vars]tracing_tst_path} \
             --ignore={[vars]examples_path} \
             -v --tb native \
             -W 'ignore:Harness is deprecated:PendingDeprecationWarning' {posargs}
    coverage report
    mv .coverage .coverage-ops

[testenv:coverage-tracing]
description = Run tracing unit tests with coverage
allowlist_externals = mv
dependency_groups = unit, coverage
changedir = ./tracing/
commands =
    coverage run --source=. --branch -m pytest \
             -v --tb native \
             -W 'ignore:Harness is deprecated:PendingDeprecationWarning' {posargs}
    coverage report
    mv .coverage ../.coverage-tracing

[testenv:coverage-report]
description = Report on coverage
allowlist_externals = mkdir
dependency_groups = coverage
commands =
    mkdir -p .report
    coverage combine -a .coverage-ops
    coverage combine -a .coverage-tracing
    coverage xml -o .report/coverage.xml
    coverage report

[testenv:benchmark]
description = Run benchmark tests
passenv =
    RUN_REAL_PEBBLE_TESTS
    PEBBLE
dependency_groups = unit, benchmark
commands =
    pytest -v --tb native \
        {[vars]tst_path}benchmark \
        {[vars]testing_tst_path}benchmark \
        {posargs}

[testenv:py{3.10,3.12}-pebble]
runner = uv-venv-lock-runner
base=pebble

[testenv:pebble]
description = Run real pebble tests
allowlist_externals = bash
                      killall
setenv =
  PEBBLE=/tmp/pebble
  RUN_REAL_PEBBLE_TESTS=1
passenv = PATH
dependency_groups = unit
commands_pre = bash -c "umask 0; pebble run --http=':4000' --create-dirs &>/dev/null& sleep 1"
commands = pytest -v --tb native test/test_real_pebble.py {posargs}
commands_post = killall -y 3m pebble

[testenv:smoke]
description = Run a smoke test against a Juju controller.
allowlist_externals =
    juju
    charmcraft
    bash
    uv
dependency_groups = integration
commands =
    # Clean any stale artefacts, in case these steps are run locally and repeatedly.
    bash -c 'rm -vf test/charms/test_smoke/*.tar.gz'
    bash -c 'rm -vf test/charms/test_smoke/*.whl'
    bash -c 'rm -vf test/charms/test_smoke/requirements.txt'
    # Build ops and friends from this checkout.
    uv build --all --out-dir=test/charms/test_smoke/
    # Inject current ops into the smoke test charm's requirements.
    bash -c 'basename test/charms/test_smoke/ops-3.*.whl >> test/charms/test_smoke/requirements.txt'
    # Run our smoke tests (this will build the charm, then run the tests).
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/test/smoke/

[testenv:integration]
description = Run a suite of integration tests.
dependency_groups = integration
commands = pytest -vvv --tb native {toxinidir}/test/integration/ {posargs}

[testenv:draft-release]
description = Make a draft release
dependency_groups = release
passenv = GITHUB_TOKEN
commands = python release.py {posargs}

[testenv:post-release]
description = Perform post-release actions
dependency_groups = release
passenv = GITHUB_TOKEN
commands = python release.py --post-release {posargs}
